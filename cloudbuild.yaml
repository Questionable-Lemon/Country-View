# -----------------
# WORKFLOW:
# -> Before build happens unit test react components with Jest ( in github actions workflow )
# -> Build Phase:
  # -> Check GCP artifact registry for existing Docker images
  # -> Build Docker image if there isn't an existing one
  # -> Test container(backend) with pytest unit tests
  # -> Push image to artifact registry
# -> Staging Phase (if merge was made on the development branch)
  # -> Deploy backend service to Cloud Run with no traffic, assign unique tag
  # -> Update firebase.json to point to the new staged service using its tag. Deploy frontend to firebase
  # -> Run pytest integration/e2e tests. Pass in the staging url
# -> Production Phase (if merge was made from development to production)
  # -> Fetch tag that passed testing and update the Cloud Run service to service all traffic
  # -> Deploy frontend to firebase with production url with the same frontend config
# -----------------

steps:

# ----------------
# BUILD PHASE (STAGING AND PRODUCTION)
# ----------------
- name: 'gcr.io/cloud-builders/docker'
  id: 'Pull Cache'
  entrypoint: 'bash'
  args: ['-c', 'docker pull gcr.io/$PROJECT_ID/country-view:latest || exit 0']

- name: 'gcr.io/cloud-builders/docker'
  id: 'Build Image'
  args:
    - 'build'
    - '--cache-from'
    - 'gcr.io/$PROJECT_ID/country-view:latest'
    - '-t'
    - 'gcr.io/$PROJECT_ID/country-view:$COMMIT_SHA'
    - '-t'
    - 'gcr.io/$PROJECT_ID/country-view:latest'
    - '.'

- name: 'gcr.io/$PROJECT_ID/country-view:$COMMIT_SHA'
  id: 'Run Backend Tests'
  entrypoint: '/bin/sh'
  args: ['-c', 'pip install -r requirements-dev.txt && pytest']
  secretEnv: ['APP_SECRETS_JSON_V2']

- name: 'gcr.io/cloud-builders/docker'
  id: 'Push Image'
  args: ['push', 'gcr.io/$PROJECT_ID/country-view', '--all-tags']

# ---------------
# DEPLOYMENT PHASE FOR STAGING (Runs on merge to development branch)
# ---------------
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'Deploy to Cloud Run (STAGING)'
  entrypoint: 'gcloud'
  args: ['run', 'deploy', 'country-view', '--region', 'us-central1',
         '--image', 'gcr.io/$PROJECT_ID/country-view:$COMMIT_SHA',
         '--platform', 'managed',
         '--no-traffic',
         '--set-secrets=APP_SECRETS_JSON_V2=APP_SECRETS_JSON_V2:latest',
         '--cpu=2', '--memory=4Gi']

availableSecrets:
  secretManager:
  - versionName: 'projects/$PROJECT_ID/secrets/APP_SECRETS_JSON_V2/versions/latest'
    env: 'APP_SECRETS_JSON_V2'

options:
  logging: CLOUD_LOGGING_ONLY
